#!/usr/bin/env bash
#
# fzf-git-branch - checkout git branch
# Uses fzf
# @see <https://github.com/junegunn/fzf/wiki/examples>

# get_local_branches
#
# Proper way to get a porcelain list of local branches for shell script use
#
__get_local_branches() {
  local fmt
  fmt="
    r=%(refname)
    refname_without_prefix=\${r#refs/heads/}
    printf \"%s\\t%s\\n\" \"\$refname_without_prefix\"
  "

  local cmd_get_local_branches
  cmd_get_local_branches=$(
    git for-each-ref --shell --format="$fmt" refs/heads
  )

  eval "$cmd_get_local_branches"
}

__fzf-git-branch() {
  local current
  current=$(git rev-parse --abbrev-ref HEAD)
  if [ -z "$current" ]; then
    >&2 echo "You must be in a git repo to get branches."
    return 1
  fi

  local branches
  branches="$(__get_local_branches)"
  if [ -z "$branches" ]; then
    >&2 echo "No branches found."
    return 1
  fi

  local out
  out=$(fzf \
    +m \
    --cycle \
    --exit-0 \
    --expect=ctrl-y \
    --height=25% --no-hscroll --no-multi \
    --no-mouse \
    --nth=1 \
    --preview="git log {1} --abbrev-commit --oneline --max-count 25" \
    --prompt="${current}> " <<<"$branches")

  local branch
  branch="$(head -2 <<<"$out" | tail -1)"
  branch="${branch//[[:blank:]]/}" # strip spaces
  [ -z "$branch" ] && return 1

  local key
  key="$(head -1 <<<"$out")"

  if [[ "$key" == "ctrl-y" ]]; then
    printf '%s' "$branch" | pbcopy
    printf '"%s" copied into clipboard\n' "$branch"
    return
  fi

  git checkout "$branch"
}
__fzf-git-branch
